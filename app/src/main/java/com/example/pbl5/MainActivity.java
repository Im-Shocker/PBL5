package com.example.pbl5;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import android.os.Bundle;
import android.speech.tts.TextToSpeech;
import android.widget.ArrayAdapter;
import android.widget.Toast;
import android.util.Log;
import android.view.View;
import android.view.animation.AnimationUtils;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.example.pbl5.databinding.ActivityMainBinding;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = "SpeechReceiver";
    private static final int PORT = 6000;

    // View Binding
    private ActivityMainBinding binding;

    // Data v√† logic
    private ArrayList<String> history = new ArrayList<>();
    private HistoryAdapter historyAdapter;
    private TextToSpeech tts;
    private ServerSocket serverSocket;
    private ExecutorService executorService;
    private boolean isReceiving = false;
    private boolean isServerRunning = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Kh·ªüi t·∫°o View Binding
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        initializeViews();
        setupTextToSpeech();
        setupToggleButton();
        startServer();
    }

    private void initializeViews() {
        // Setup ListView v·ªõi custom adapter ƒë·∫πp
        historyAdapter = new HistoryAdapter(this, history);
        binding.lvHistory.setAdapter(historyAdapter);

        // Thi·∫øt l·∫≠p tr·∫°ng th√°i ban ƒë·∫ßu
        updateToggleButton();
        updateHistoryCount();
        showEmptyState();

        Log.i(TAG, "Views ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi giao di·ªán ƒë·∫πp");
    }

    private void setupTextToSpeech() {
        tts = new TextToSpeech(this, status -> {
            if (status == TextToSpeech.SUCCESS) {
                int result = tts.setLanguage(new Locale("vi", "VN"));
                if (result == TextToSpeech.LANG_MISSING_DATA ||
                        result == TextToSpeech.LANG_NOT_SUPPORTED) {
                    Log.w(TAG, "Kh√¥ng h·ªó tr·ª£ ti·∫øng Vi·ªát, chuy·ªÉn sang ti·∫øng Anh");
                    tts.setLanguage(Locale.US);
                }
                Log.i(TAG, "TextToSpeech ƒë√£ s·∫µn s√†ng");
                updateStatusMessage("üé§ H·ªá th·ªëng ph√°t √¢m ƒë√£ s·∫µn s√†ng", false);
            } else {
                Log.e(TAG, "Kh·ªüi t·∫°o TextToSpeech th·∫•t b·∫°i");
                showToast("Kh√¥ng th·ªÉ kh·ªüi t·∫°o ch·ª©c nƒÉng ƒë·ªçc vƒÉn b·∫£n");
                updateStatusMessage("‚ùå L·ªói kh·ªüi t·∫°o h·ªá th·ªëng ph√°t √¢m", true);
            }
        });
    }

    private void setupToggleButton() {
        binding.btnOnOff.setOnClickListener(v -> {
            // Animation cho button
            v.startAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_in));

            isReceiving = !isReceiving;
            updateToggleButton();

            String status = isReceiving ? "B·∫¨T" : "T·∫ÆT";
            showToast("ƒê√£ " + status + " ch·∫ø ƒë·ªô nh·∫≠n c·ª≠ ch·ªâ");

            // C·∫≠p nh·∫≠t status message
            if (isReceiving) {
                updateStatusMessage("‚úÖ ƒêang l·∫Øng nghe c·ª≠ ch·ªâ t·ª´ Raspberry Pi", false);
            } else {
                updateStatusMessage("‚è∏Ô∏è T·∫°m d·ª´ng nh·∫≠n c·ª≠ ch·ªâ", false);
            }

            Log.i(TAG, "Ch·∫ø ƒë·ªô nh·∫≠n c·ª≠ ch·ªâ: " + status);
        });
    }

    private void updateToggleButton() {
        if (isReceiving) {
            binding.btnOnOff.setText("T·∫ÆT Nh·∫≠n C·ª≠ Ch·ªâ");
            binding.btnOnOff.setIcon(ContextCompat.getDrawable(this, R.drawable.ic_stop));
            binding.btnOnOff.setBackgroundTintList(ContextCompat.getColorStateList(this, R.color.button_secondary));
        } else {
            binding.btnOnOff.setText("B·∫¨T Nh·∫≠n C·ª≠ Ch·ªâ");
            binding.btnOnOff.setIcon(ContextCompat.getDrawable(this, R.drawable.ic_play));
            binding.btnOnOff.setBackgroundTintList(ContextCompat.getColorStateList(this, R.color.button_primary));
        }

        // Animation cho transition
        binding.btnOnOff.startAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_in));
    }

    private void updateStatusMessage(String message, boolean isError) {
        binding.tvCuChi.setText(message);

        // Thay ƒë·ªïi background d·ª±a v√†o tr·∫°ng th√°i
        if (isError) {
            binding.tvCuChi.setBackgroundTintList(ContextCompat.getColorStateList(this, R.color.status_error));
        } else {
            binding.tvCuChi.setBackgroundTintList(ContextCompat.getColorStateList(this, R.color.status_success));
        }

        // Animation cho status update
        binding.tvCuChi.startAnimation(AnimationUtils.loadAnimation(this, android.R.anim.slide_in_left));
    }

    private void updateHistoryCount() {
        binding.tvHistoryCount.setText(String.valueOf(history.size()));

        // Show/hide empty state
        if (history.isEmpty()) {
            showEmptyState();
        } else {
            hideEmptyState();
        }
    }

    private void showEmptyState() {
        binding.emptyState.setVisibility(View.VISIBLE);
        binding.lvHistory.setVisibility(View.GONE);
    }

    private void hideEmptyState() {
        binding.emptyState.setVisibility(View.GONE);
        binding.lvHistory.setVisibility(View.VISIBLE);
    }

    private void startServer() {
        executorService = Executors.newSingleThreadExecutor();
        executorService.execute(() -> {
            try {
                serverSocket = new ServerSocket(PORT);
                isServerRunning = true;
                Log.i(TAG, "Server ƒëang l·∫Øng nghe tr√™n port " + PORT);

                runOnUiThread(() -> {
                    showToast("üöÄ Server ƒë√£ kh·ªüi ƒë·ªông tr√™n port " + PORT);
                    updateStatusMessage("üåê Server ƒëang ch·∫°y - Port: " + PORT + "\nüì± Ch·ªù k·∫øt n·ªëi t·ª´ Raspberry Pi...", false);
                });

                while (isServerRunning && !Thread.currentThread().isInterrupted()) {
                    try {
                        Socket clientSocket = serverSocket.accept();
                        Log.i(TAG, "C√≥ k·∫øt n·ªëi t·ª´: " + clientSocket.getInetAddress());

                        // Hi·ªÉn th·ªã th√¥ng tin k·∫øt n·ªëi v·ªõi animation
                        runOnUiThread(() -> {
                            String connectionInfo = "üîó ƒê√£ k·∫øt n·ªëi v·ªõi: " + clientSocket.getInetAddress() + "\n‚è≥ ƒêang ch·ªù d·ªØ li·ªáu...";
                            updateStatusMessage(connectionInfo, false);
                        });

                        // X·ª≠ l√Ω t·ª´ng k·∫øt n·ªëi trong thread ri√™ng
                        handleClientConnection(clientSocket);

                    } catch (IOException e) {
                        if (isServerRunning) {
                            Log.e(TAG, "L·ªói khi ch·∫•p nh·∫≠n k·∫øt n·ªëi: " + e.getMessage());
                        }
                        break;
                    }
                }
            } catch (IOException e) {
                Log.e(TAG, "L·ªói kh·ªüi t·∫°o server: " + e.getMessage());
                runOnUiThread(() -> {
                    showToast("‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông server");
                    updateStatusMessage("‚ùå L·ªói server: " + e.getMessage(), true);
                });
            }
        });
    }

    private void handleClientConnection(Socket clientSocket) {
        try (BufferedReader in = new BufferedReader(
                new InputStreamReader(clientSocket.getInputStream()))) {

            String message;
            while ((message = in.readLine()) != null) {
                final String finalMessage = message.trim();

                if (!finalMessage.isEmpty()) {
                    Log.i(TAG, "Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn: " + finalMessage);

                    runOnUiThread(() -> {
                        if (isReceiving) {
                            processReceivedMessage(finalMessage);
                        } else {
                            Log.i(TAG, "Tin nh·∫Øn b·ªã b·ªè qua (ch·∫ø ƒë·ªô t·∫Øt): " + finalMessage);
                            // V·∫´n hi·ªÉn th·ªã tin nh·∫Øn nh∆∞ng kh√¥ng ƒë·ªçc to
                            updateStatusMessage("‚è∏Ô∏è (T·∫°m d·ª´ng) " + finalMessage, false);
                        }
                    });
                }
            }
        } catch (IOException e) {
            Log.e(TAG, "L·ªói ƒë·ªçc d·ªØ li·ªáu t·ª´ client: " + e.getMessage());
            runOnUiThread(() -> {
                updateStatusMessage("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi v·ªõi client", true);
            });
        } finally {
            try {
                clientSocket.close();
                Log.i(TAG, "ƒê√£ ƒë√≥ng k·∫øt n·ªëi client");
                runOnUiThread(() -> {
                    updateStatusMessage("üì± Ch·ªù k·∫øt n·ªëi m·ªõi t·ª´ Raspberry Pi...", false);
                });
            } catch (IOException e) {
                Log.e(TAG, "L·ªói ƒë√≥ng k·∫øt n·ªëi client: " + e.getMessage());
            }
        }
    }

    private void processReceivedMessage(String message) {
        // C·∫≠p nh·∫≠t UI v·ªõi animation
        updateStatusMessage("üéØ " + message, false);

        // Th√™m v√†o l·ªãch s·ª≠ v·ªõi emoji v√† timestamp
        String timestampedMessage = getCurrentTimestamp() + " üî∏ " + message;
        history.add(0, timestampedMessage);

        // Gi·ªõi h·∫°n l·ªãch s·ª≠ (gi·ªØ t·ªëi ƒëa 50 tin nh·∫Øn)
        if (history.size() > 50) {
            history.remove(history.size() - 1);
        }

        historyAdapter.notifyDataSetChanged();
        updateHistoryCount();

        // Auto scroll to top ƒë·ªÉ xem tin nh·∫Øn m·ªõi nh·∫•t
        binding.lvHistory.smoothScrollToPosition(0);

        // Animation cho list view
        binding.lvHistory.startAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_in));

        // ƒê·ªçc tin nh·∫Øn
        speakMessage(message);

        // Hi·ªÉn th·ªã toast v·ªõi emoji
        showToast("üì¢ " + message);

        Log.i(TAG, "ƒê√£ x·ª≠ l√Ω tin nh·∫Øn: " + message);
    }

    private void speakMessage(String message) {
        if (tts != null) {
            // Th√™m pause ng·∫Øn tr∆∞·ªõc khi ƒë·ªçc
            String speakText = message;
            tts.speak(speakText, TextToSpeech.QUEUE_FLUSH, null, "message_id");
            Log.d(TAG, "üîä ƒêang ƒë·ªçc: " + message);

            // C·∫≠p nh·∫≠t UI ƒë·ªÉ hi·ªÉn th·ªã ƒëang ƒë·ªçc
            runOnUiThread(() -> {
                updateStatusMessage("üîä ƒêang ph√°t: " + message, false);
            });
        } else {
            Log.w(TAG, "TTS ch∆∞a s·∫µn s√†ng");
            runOnUiThread(() -> {
                updateStatusMessage("‚ö†Ô∏è H·ªá th·ªëng ph√°t √¢m ch∆∞a s·∫µn s√†ng", true);
            });
        }
    }

    private String getCurrentTimestamp() {
        return new java.text.SimpleDateFormat("HH:mm:ss", Locale.getDefault())
                .format(new java.util.Date());
    }

    private void showToast(String message) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        // D·ª´ng server
        isServerRunning = false;

        // ƒê√≥ng TextToSpeech
        if (tts != null) {
            tts.stop();
            tts.shutdown();
            Log.i(TAG, "TTS ƒë√£ ƒë∆∞·ª£c d·ªçn d·∫πp");
        }

        // ƒê√≥ng ServerSocket
        try {
            if (serverSocket != null && !serverSocket.isClosed()) {
                serverSocket.close();
                Log.i(TAG, "Server socket ƒë√£ ƒë√≥ng");
            }
        } catch (IOException e) {
            Log.e(TAG, "L·ªói ƒë√≥ng server socket: " + e.getMessage());
        }

        // D·ª´ng ExecutorService
        if (executorService != null) {
            executorService.shutdown();
            Log.i(TAG, "ExecutorService ƒë√£ d·ª´ng");
        }

        // D·ªçn d·∫πp binding
        binding = null;

        Log.i(TAG, "üßπ ·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c d·ªçn d·∫πp ho√†n to√†n");
    }

    @Override
    protected void onPause() {
        super.onPause();
        // T·∫°m d·ª´ng TTS khi ·ª©ng d·ª•ng kh√¥ng active
        if (tts != null) {
            tts.stop();
            Log.d(TAG, "TTS ƒë√£ t·∫°m d·ª´ng");
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        Log.d(TAG, "üì± ·ª®ng d·ª•ng ƒë√£ resume");

        // C·∫≠p nh·∫≠t UI khi quay l·∫°i app
        if (isServerRunning) {
            updateStatusMessage("üîÑ ·ª®ng d·ª•ng ƒë√£ ho·∫°t ƒë·ªông tr·ªü l·∫°i", false);
        }
    }
}